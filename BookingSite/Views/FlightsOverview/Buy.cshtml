@using BookingSite.ViewModels
@model BookingSite.ViewModels.TicketOverviewViewModel
@{
    ViewData["Title"] = "Flight Details";
	ViewData["TitleIcon"] = "ticket-perforated";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Flight Details</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="flight-info">
                        <h4>Journey</h4>
                        <div class="d-flex align-items-center mb-3">
                            <div class="flight-route">
                                <h5 class="mb-0">@Model.FromAirport</h5>
                                <small class="text-muted">Departure</small>
                            </div>
                            <div class="mx-3">
                                <i class="bi bi-arrow-right"></i>
                            </div>
                            <div class="flight-route">
                                <h5 class="mb-0">@Model.ToAirport</h5>
                                <small class="text-muted">Arrival</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="flight-details">
                        <h4>Details</h4>
                        <p><i class="bi bi-calendar me-2"></i> <strong>Date:</strong> @Model.Date?.ToString("dddd, MMMM d, yyyy")</p>
                        <p><i class="bi bi-currency-euro me-2"></i> <strong>Base Price:</strong> €@Model.Price</p>
                        @if (Model.RouteSegments.Any())
                        {
                            <div>
                                <i class="bi bi-geo-alt me-2"></i> <strong>Transfers:</strong>
                                <ul class="list-unstyled ms-4">
                                    @foreach (var segment in Model.RouteSegments)
                                    {
                                        <li><i class="bi bi-arrow-right-short"></i> @segment</li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow mt-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Book Tickets</h3>
            <button id="addTicket" class="btn btn-light"><i class="bi bi-plus"></i> Add Passenger</button>
        </div>
        <div class="card-body">
            <form asp-action="AddToShoppingCart" method="post" id="bookingForm">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.FlightId)

                <div id="tickets-container">
                    <div class="ticket-item card mb-4">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Passenger 1</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Travel Class</label>
                                    <select class="form-select seat-class-select" name="tickets[0].SeatClass">
                                        @foreach (var item in Model.SeatClasses)
                                        {
                                            <option value="@item.Id" data-available="@item.Available">@item.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Meal Choice</label>
                                    <select class="form-select meal-select" name="tickets[0].Meal">
                                        <option value="">-- Select a meal --</option>
                                        @foreach (var item in Model.Meals)
                                        {
                                            <option value="@item.Value">@item.Text</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="ticket-price-details mt-2">
                                <h6>Price Details:</h6>
                                <div class="price-breakdown"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h4>Total Price Breakdown</h4>
                                <div id="total-price-breakdown"></div>
                            </div>
                            <div class="col-md-6 text-end">
                                <h4>Total Price: <span class="text-primary" id="total-price">€@Model.Price</span></h4>
                                <button type="submit" id="submitButton" class="btn btn-primary btn-lg mt-3">
                                    <i class="bi bi-cart-plus"></i> Add to Shopping Cart
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            let ticketCount = 1;
            let isProcessing = false
            updateAllTickets();

            function blockUI() {
                isProcessing = true;
                // Create overlay if it doesn't exist
                if ($('#processing-overlay').length === 0) {
                    $('body').append(`
                        <div id="processing-overlay" class="position-fixed top-0 start-0 w-100 h-100"
                             style="background-color: transparent; z-index: 9999; pointer-events: all;">
                          <div class="position-absolute top-50 start-50 translate-middle">
                            <div class="spinner-border text-primary" role="status"></div>
                          </div>
                        </div>
                    `);
                } else {
                    $('#processing-overlay').show();
                }
                // Disable all inputs, selects and buttons
                $('#bookingForm').find('input, select, button').prop('disabled', true);
                $('#addTicket').prop('disabled', true);
            }

            function unblockUI() {
                isProcessing = false;
                // Hide overlay
                $('#processing-overlay').hide();
                // Enable all inputs, selects and buttons
                $('#bookingForm').find('input, select, button').prop('disabled', false);
                $('#addTicket').prop('disabled', false);
            }

            // Add ticket button
            $("#addTicket").click(function(e) {
                e.preventDefault();
                if (isProcessing) return;

                // Check availability before adding a new ticket
                blockUI()
                checkAvailabilityAndAddTicket();
            });

            // Check if there's capacity for another passenger before adding the ticket
            function checkAvailabilityAndAddTicket() {
                const tickets = collectTicketData();

                // Check availability with the temporary ticket
                $.ajax({
                    url: "/FlightsOverview/CalculateTickets",
                    type: "POST",
                    data: JSON.stringify({
                        flightId: @Model.FlightId,
                        tickets: tickets,
                        addAction: true
                    }),
                    contentType: "application/json",
                    success: function(response) {
                        if (response.canAdd) {
                            addNewTicketFromServer(response.tickets[response.tickets.length - 1], response.tickets.length);
                            updateTicketDisplay(response.tickets);
                        } else {
							showNoAvailabilityMessage();
                        }
                        unblockUI();
                    },
                    error: function(error) {
                        console.error("Error checking availability:", error);
                        showErrorMessage("Could not check seat availability");
                    }
                });
            }

        function addNewTicketFromServer(ticketData, passengerNumber) {
            ticketCount = passengerNumber; // keep ticketCount in sync

            // Build options for seat class (no selected attribute)
            let seatClassOptions = '';
            @foreach (var item in Model.SeatClasses)
            {
                    <text>
                    seatClassOptions += `<option value="@item.Id" data-available="@item.Available">@item.Name</option>`;
                    </text>
            }

            // Build options for meal (no selected attribute)
            let mealOptions = '<option value="">-- Select a meal --</option>';
            @foreach (var item in Model.Meals)
            {
                    <text>
                    mealOptions += `<option value="@item.Value">@item.Text</option>`;
                    </text>
            }

            const newTicket = `
            <div class="ticket-item card mb-4">
                <div class="card-header bg-light d-flex justify-content-between">
                    <h5 class="mb-0">Passenger ${passengerNumber}</h5>
                    <button type="button" class="btn btn-sm btn-outline-danger remove-ticket">
                        <i class="bi bi-trash"></i> Remove
                    </button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Travel Class</label>
                            <select class="form-select seat-class-select" name="tickets[${passengerNumber-1}].SeatClass">
                                ${seatClassOptions}
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Meal Choice</label>
                            <select class="form-select meal-select" name="tickets[${passengerNumber-1}].Meal">
                                ${mealOptions}
                            </select>
                        </div>
                    </div>
                    <div class="ticket-price-details mt-2">
                        <h6>Price Details:</h6>
                        <div class="price-breakdown"></div>
                    </div>
                </div>
            </div>`;

            $("#tickets-container").append(newTicket);

            // Set the selected values after appending
            setTimeout(function() {
                $(`select[name="tickets[${passengerNumber-1}].SeatClass"]`).val(ticketData.selectedClass);
                $(`select[name="tickets[${passengerNumber-1}].Meal"]`).val(ticketData.selectedMeal);
            }, 0);

            bindRemoveTicketEvents();
        }

            // Add a new ticket to the form
            function addNewTicket() {
                ticketCount++;

                const newTicket = `
                <div class="ticket-item card mb-4">
                    <div class="card-header bg-light d-flex justify-content-between">
                        <h5 class="mb-0">Passenger ${ticketCount}</h5>
                        <button type="button" class="btn btn-sm btn-outline-danger remove-ticket">
                            <i class="bi bi-trash"></i> Remove
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Travel Class</label>
                                <select class="form-select seat-class-select" name="tickets[${ticketCount-1}].SeatClass">
                                    @foreach (var item in Model.SeatClasses)
                                    {
                                            <option value="@item.Id" data-available="@item.Available">@item.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Meal Choice</label>
                                <select class="form-select meal-select" name="tickets[${ticketCount-1}].Meal">
                                    <option value="">-- Select a meal --</option>
                                    @foreach (var item in Model.Meals)
                                    {
                                            <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="ticket-price-details mt-2">
                            <h6>Price Details:</h6>
                            <div class="price-breakdown"></div>
                        </div>
                    </div>
                </div>`;

                $("#tickets-container").append(newTicket);
                updateAllTickets();
                bindRemoveTicketEvents();
            }

            // Show a message when no more seats are available
            function showNoAvailabilityMessage() {
                const alertHtml = `
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <strong>No more seats available!</strong> This flight doesn't have capacity for additional passengers.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;

                // Insert the alert before the tickets container
                $(alertHtml).insertBefore("#tickets-container").delay(5000).fadeOut(500);
            }

            // Show a generic error message
            function showErrorMessage(message) {
                const alertHtml = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>Error!</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;

                // Insert the alert before the tickets container
                $(alertHtml).insertBefore("#tickets-container").delay(5000).fadeOut(500);
            }

            // Bind remove ticket event
            function bindRemoveTicketEvents() {
                $(".remove-ticket").off("click").on("click", function() {
                    if (isProcessing) return;

                    blockUI();
                    $(this).closest(".ticket-item").remove();

                    // Renumber the passengers after removal
                    $(".ticket-item").each(function(idx) {
                        $(this).find(".card-header h5").text(`Passenger ${idx + 1}`);
                        // Update the name attributes for form submission
                        $(this).find(".seat-class-select").attr("name", `tickets[${idx}].SeatClass`);
                        $(this).find(".meal-select").attr("name", `tickets[${idx}].Meal`);
                    });

                    updateAllTickets();
                });
            }

            // Event listeners for class and meal changes
            $(document).on("change", ".seat-class-select , .meal-select", function() {
                if (!isProcessing) {

                    // Renumber the passengers
                    $(".ticket-item").each(function(idx) {
                        $(this).find(".card-header h5").text(`Passenger ${idx + 1}`);
                        // Update the name attributes for form submission
                        $(this).find(".seat-class-select").attr("name", `tickets[${idx}].SeatClass`);
                        $(this).find(".meal-select").attr("name", `tickets[${idx}].Meal`);
                    });

                    blockUI();
                    updateAllTickets();
                }
            });

            // Collect all ticket data from the form
            function collectTicketData() {
                const tickets = [];

                $(".ticket-item").each(function(index) {
                    const seatClassId = $(this).find(".seat-class-select").val();
                    const mealId = $(this).find(".meal-select").val() || null; // Handle empty meal selection

                    tickets.push({
                        seatClassId: seatClassId,
                        mealId: mealId
                    });
                });

                return tickets;
            }

            // Update tickets for all passengers
            function updateAllTickets() {
                const tickets = collectTicketData();

                if (tickets.length === 0) return;

                // AJAX call to get updated ticket information
                $.ajax({
                    url: "/FlightsOverview/CalculateTickets",
                    type: "POST",
                    data: JSON.stringify({
                        flightId: @Model.FlightId,
                        tickets: tickets
                    }),
                    contentType: "application/json",
                    success: function(response) {
                        updateTicketDisplay(response);
                        unblockUI()
                    },
                    error: function(error) {
                        console.error("Error calculating tickets:", error);
                    }
                });
            }

            // Update the display with ticket information
            function updateTicketDisplay(ticketsData) {
                let totalPrice = 0;

                // Update individual ticket information
                $(".ticket-item").each(function(index) {
                    if (ticketsData[index]) {
                        const ticketData = ticketsData[index];
                        const breakdownElement = $(this).find(".price-breakdown");
                        const classSelect = $(this).find(".seat-class-select");
                        const mealSelect = $(this).find(".meal-select");

                        // Update class select options based on availability
                        updateClassOptions(classSelect, ticketData.availableClasses, ticketData.selectedClass);

                        // Update meal selection if it came back from server
                        if (ticketData.selectedMeal) {
                            mealSelect.val(ticketData.selectedMeal);
                        }

                        // Display price breakdown
                        let breakdownHtml = `<div class="base-price">Base Price: €${ticketData.basePrice.toFixed(2)}</div>`;

                        let ticketTotal = ticketData.basePrice;

                        if (ticketData.fees && ticketData.fees.length > 0) {
                            breakdownHtml += '<ul class="fee-list">';
                            ticketData.fees.forEach(function(fee) {
                                breakdownHtml += `<li>${fee.title}: €${fee.value.toFixed(2)}</li>`;
                                ticketTotal += fee.value;
                            });
                            breakdownHtml += '</ul>';
                        }

                        breakdownHtml += `<div class="ticket-total">Ticket Total: €${ticketTotal.toFixed(2)}</div>`;
                        breakdownElement.html(breakdownHtml);

                        totalPrice += ticketTotal;
                    }
                });

                // Update total price
                $("#total-price").text(`€${totalPrice.toFixed(2)}`);

                // Update total price breakdown
                let totalBreakdownHtml = '';
                ticketsData.forEach(function(ticketData, index) {
                    let ticketTotal = ticketData.basePrice;
                    ticketData.fees.forEach(fee => ticketTotal += fee.value);

                    let seatClass = ticketData.selectedClass == 1 ? "First Class" : "Second Class";
                    totalBreakdownHtml += `<div class="mb-2">Passenger ${index + 1} (${seatClass}): €${ticketTotal.toFixed(2)}</div>`;
                });

                $("#total-price-breakdown").html(totalBreakdownHtml);

                // Check if form submission should be enabled
                validateBookingForm(ticketsData);
            }

            // Validate the form to ensure all tickets have required fields
            function validateBookingForm(ticketsData) {
                let isValid = true;

                // Check that each ticket has required selections
                ticketsData.forEach(function(ticket) {
                    if (!ticket.selectedMeal) {
                        isValid = false;
                    }
                });

                // Enable or disable submit button
                $("button[type='submit']").prop("disabled", !isValid);

                // Show or hide validation message
                if (!isValid) {
                    if ($("#meal-validation-msg").length === 0) {
                        $("<div id='meal-validation-msg' class='alert alert-info mt-3'>" +
                          "Please select a meal for all passengers before adding to cart</div>")
                            .insertBefore("#submitButton");
                    }
                } else {
                    $("#meal-validation-msg").remove();
                }
            }

            // Update class options based on availability
            function updateClassOptions(selectElement, availableClasses, selectedClass) {
                // Save current selection
                const currentVal = selectElement.val();

                // Disable all options first
                selectElement.find('option').prop('disabled', true);

                // Enable only available options
                if (availableClasses && availableClasses.length > 0) {
                    availableClasses.forEach(function(classId) {
                        selectElement.find(`option[value="${classId}"]`).prop('disabled', false);
                    });
                }

                // Set the selected class
                if (availableClasses && availableClasses.includes(parseInt(currentVal))) {
                    selectElement.val(currentVal);
                } else if (selectedClass) {
                    selectElement.val(selectedClass);
                }
            }

            // Initialize remove ticket functionality
            bindRemoveTicketEvents();
        });
    </script>
}


<style>
    .flight-route {
        text-align: center;
    }

    .price-breakdown {
        padding-left: 10px;
        border-left: 3px solid #e9ecef;
    }

    .fee-list {
        list-style-type: none;
        padding-left: 15px;
        margin-top: 5px;
        margin-bottom: 5px;
    }

    .ticket-total {
        font-weight: bold;
        margin-top: 5px;
    }

    #total-price {
        font-size: 1.5rem;
        font-weight: bold;
    }

    /* Disabled option styling */
    option:disabled {
        color: #aaa;
        font-style: italic;
    }
</style>