// <auto-generated />
using System;
using BookingSite.Domains.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingSite.Domains.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250511090634_AddCountryCodeToCity")]
    partial class AddCountryCodeToCity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Airports__3214EC0705DD149F");

                    b.HasIndex("CityId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastnNme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Bookings__3214EC07");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Cities__3214EC070A98C750");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("PlaneId")
                        .HasColumnType("int");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Flights__3214EC074EFE3197");

                    b.HasIndex("PlaneId");

                    b.HasIndex("RouteId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.MealChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirportId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__MealChoi__3214EC07EE4AD5C3");

                    b.HasIndex("AirportId");

                    b.ToTable("MealChoices");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Plane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FirstClassCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SecondClassCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Planes__3214EC07303D93A1");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FromAirportId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ToAirportId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Routes__3214EC078F424933");

                    b.HasIndex("FromAirportId");

                    b.HasIndex("ToAirportId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.RouteSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirportId")
                        .HasColumnType("int");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__RouteSeg__3214EC07BF839F08");

                    b.HasIndex("AirportId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteSegments");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirportId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Seasons__3214EC07ABFEADD9");

                    b.HasIndex("AirportId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasMaxLength(450)
                        .HasColumnType("int");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("SeatClass")
                        .HasColumnType("int");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Tickets__3214EC0705CCB4DD");

                    b.HasIndex("BookingId");

                    b.HasIndex("FlightId");

                    b.HasIndex("MealId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSite.Domains.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Airport", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.City", "City")
                        .WithMany("Airports")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Airports__CityId__2A164134");

                    b.Navigation("City");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUserToken", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Booking", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.AspNetUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Flight", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.Plane", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .HasConstraintName("FK__Flights__PlaneId__3C34F170");

                    b.HasOne("BookingSite.Domains.Models.Route", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__Flights__RouteId__3C34F16F");

                    b.Navigation("Plane");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.MealChoice", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.Airport", "Airport")
                        .WithMany("MealChoices")
                        .HasForeignKey("AirportId")
                        .HasConstraintName("FK__MealChoic__Airpo__3F115E1A");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Route", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.Airport", "FromAirport")
                        .WithMany("RouteFromAirports")
                        .HasForeignKey("FromAirportId")
                        .HasConstraintName("FK__Routes__FromAirp__3493CFA7");

                    b.HasOne("BookingSite.Domains.Models.Airport", "ToAirport")
                        .WithMany("RouteToAirports")
                        .HasForeignKey("ToAirportId")
                        .HasConstraintName("FK__Routes__ToAirpor__3587F3E0");

                    b.Navigation("FromAirport");

                    b.Navigation("ToAirport");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.RouteSegment", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.Airport", "Airport")
                        .WithMany("RouteSegments")
                        .HasForeignKey("AirportId")
                        .HasConstraintName("FK__RouteSegm__Airpo__395884C4");

                    b.HasOne("BookingSite.Domains.Models.Route", "Route")
                        .WithMany("RouteSegments")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__RouteSegm__Route__3864608B");

                    b.Navigation("Airport");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Season", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.Airport", "Airport")
                        .WithMany("Seasons")
                        .HasForeignKey("AirportId")
                        .HasConstraintName("FK__Seasons__Airport__2CF2ADDF");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Ticket", b =>
                {
                    b.HasOne("BookingSite.Domains.Models.Booking", "Booking")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Tickets__Booking");

                    b.HasOne("BookingSite.Domains.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .HasConstraintName("FK__Tickets__FlightI__41EDCAC5");

                    b.HasOne("BookingSite.Domains.Models.MealChoice", "Meal")
                        .WithMany("Tickets")
                        .HasForeignKey("MealId")
                        .HasConstraintName("FK__Tickets__MealId__42E1EEFE");

                    b.Navigation("Booking");

                    b.Navigation("Flight");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Airport", b =>
                {
                    b.Navigation("MealChoices");

                    b.Navigation("RouteFromAirports");

                    b.Navigation("RouteSegments");

                    b.Navigation("RouteToAirports");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Booking", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.City", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Flight", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.MealChoice", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Plane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("BookingSite.Domains.Models.Route", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("RouteSegments");
                });
#pragma warning restore 612, 618
        }
    }
}
